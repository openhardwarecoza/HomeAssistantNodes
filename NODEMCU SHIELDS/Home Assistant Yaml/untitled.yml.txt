esphome:
  name: smartgarden

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

ota:


wifi:
  networks:
  - ssid: "30BIRD-YARD"
    password: "ffeeddccbbaa"
  - ssid: "D-Link-2.4G"
    password: "ffeeddccbbaa"
  - ssid: "D-Link-5G"
    password: "ffeeddccbbaa"
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.0.54
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.0.252
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-C73120"
    password: "ffeeddccbbaa"

captive_portal:

web_server:
  port: 80
  
status_led:
  pin:
    number: 2
    inverted: false
  
sensor:

  - platform: dht
    pin: 15
    temperature:
      name: "Temp"
    humidity:
      name: "Humidity"
    update_interval: 1s

  - platform: adc
    attenuation: auto
    pin: 36
    name: "Analog Sensor 1"
    update_interval: 1s
    # unit_of_measurement: "%"
    icon: "mdi:watering-can"
    state_class: "measurement"
    # filters:
    #   - calibrate_linear:
    #       - 0.14 -> 0.0
    #       - 0.73 -> 100
    accuracy_decimals: 2
  - platform: adc
    attenuation: auto
    pin: 39
    name: "Analog Sensor 2"
    update_interval: 1s
    # unit_of_measurement: "%"
    icon: "mdi:watering-can"
    state_class: "measurement"
    # filters:
    #   - calibrate_linear:
    #       - 0.14 -> 0.0
    #       - 0.73 -> 100
    accuracy_decimals: 2
  - platform: adc
    attenuation: auto
    pin: 34
    name: "Analog Sensor 3"
    update_interval: 1s
    # unit_of_measurement: "%"
    icon: "mdi:watering-can"
    state_class: "measurement"
    # filters:
    #   - calibrate_linear:
    #       - 0.14 -> 0.0
    #       - 0.73 -> 100
    accuracy_decimals: 2
  - platform: adc
    attenuation: auto
    pin: 35
    name: "Analog Sensor 4"
    update_interval: 1s
    # unit_of_measurement: "%"
    icon: "mdi:watering-can"
    state_class: "measurement"
    # filters:
    #   - calibrate_linear:
    #       - 0.14 -> 0.0
    #       - 0.73 -> 100
    accuracy_decimals: 2
  - platform: adc
    attenuation: auto
    pin: 32
    name: "Analog Sensor 5"
    update_interval: 1s
    # unit_of_measurement: "%"
    icon: "mdi:watering-can"
    state_class: "measurement"
    accuracy_decimals: 2
  - platform: adc
    attenuation: auto
    pin: 33
    name: "Drinking Water Tank Level"
    update_interval: 1s
    unit_of_measurement: "%"
    icon: "mdi:watering-can"
    state_class: "measurement"
    filters:
     - min:
        window_size: 20
        send_every: 10
        send_first_at: 10
     - median:
        window_size: 7
        send_every: 4
        send_first_at: 3
     - calibrate_linear:
        - 0.5 -> 0.0
        - 1.3 -> 100
    accuracy_decimals: 0
    
switch:
  - platform: gpio
    name: "Switch 1"
    pin: GPIO23
  - platform: gpio
    name: "Switch 2"
    pin: GPIO22
  - platform: gpio
    name: "Switch 3"
    pin: GPIO21
  - platform: gpio
    name: "Switch 4"
    pin: GPIO19
  - platform: gpio
    name: "Switch 5"
    pin: GPIO18
  - platform: gpio
    name: "Switch 6"
    pin: GPIO5
  - platform: gpio
    name: "Switch 7"
    pin: GPIO17
  - platform: gpio
    name: "Switch 8"
    pin: GPIO16
    

# Configure the output
output:
  - platform: ledc
    ######################################################
    # One buzzer leg connected to GPIO12, the other to GND
    ######################################################
    pin: GPIO12
    id: buzzer

# Example usage in an automation
api:
  services:
    - service: beep
      then:
      ######################################################
      # Must be turned on before setting frequency & level
      ######################################################
      - output.turn_on: buzzer
      ######################################################
      # Frequency sets the wave size
      ######################################################
      - output.ledc.set_frequency:
          id: buzzer
          frequency: "1000Hz"
      ######################################################
      # level sets the %age time the PWM is on
      ######################################################
      - output.set_level:
          id: buzzer
          level: "50%"